<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="Q5. b. OrTwoNumbers.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="Unused" type="ignored" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field18b12a3">
	</Field>
	<Field name="Address" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field1a21206">
	</Field>
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Fieldd0328d">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Registerec75f3" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register12b7207" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register826a46" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register1bd6f81" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register7d5e8" />
	<Register name="STATUS" width="1" initialValue="0" readOnly="false" id="model.module.Registera42fe5" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="HaltBit" bit="0" register="model.module.Registera42fe5" halt="true" id="model.module.ConditionBit1bfadad" />

	<!--............. rams ..........................-->
	<RAM name="Main" length="4096" cellSize="16" id="model.module.RAM1361a7c" />

	<!--............. set ...........................-->
	<!-- none -->

	<!--............. test ..........................-->
	<!-- none -->

	<!--............. increment .....................-->
	<Increment name="PC-&gt;PC+1" register="model.module.Register7d5e8" delta="1" id="model.microinstruction.Increment1fa3f27" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<Logical name="AC-&gt;AC^DR" type="AND" source1="model.module.Registerec75f3" source2="model.module.Register826a46" destination="model.module.Registerec75f3" id="model.microinstruction.Logical42f77a" />
	<Logical name="AC-&gt;AC||DR" type="OR" source1="model.module.Registerec75f3" source2="model.module.Register826a46" destination="model.module.Registerec75f3" id="model.microinstruction.Logicale4f8da" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC*DR-&gt;AC" type="MULTIPLY" source1="model.module.Registerec75f3" source2="model.module.Register826a46" destination="model.module.Registerec75f3" id="model.microinstruction.Arithmetic170f100" />
	<Arithmetic name="AC+DR-&gt;AC" type="ADD" source1="model.module.Registerec75f3" source2="model.module.Register826a46" destination="model.module.Registerec75f3" id="model.microinstruction.Arithmetic107ed4e" />
	<Arithmetic name="DR-AC-&gt;AC" type="SUBTRACT" source1="model.module.Register826a46" source2="model.module.Registerec75f3" destination="model.module.Registerec75f3" id="model.microinstruction.Arithmetic2f25f3" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC-&gt;DR" source="model.module.Registerec75f3" srcStartBit="0" dest="model.module.Register826a46" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR19823c4" />
	<TransferRtoR name="PC-&gt;AR" source="model.module.Register7d5e8" srcStartBit="0" dest="model.module.Register12b7207" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR1243446" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR" ir="model.module.Register1bd6f81" id="model.microinstruction.Decode1c1d271" />

	<!--............. set condition bit .............-->
	<SetCondBit name="Halt" bit="model.module.ConditionBit1bfadad" value="1" id="model.microinstruction.SetCondBitde68c7" />

	<!--............. io ............................-->
	<IO name="Input AC" direction="input" type="integer" buffer="model.module.Registerec75f3" connection="[Console]" id="model.microinstruction.IO6ae91b" />
	<IO name="Output AC" direction="output" type="integer" buffer="model.module.Registerec75f3" connection="[Console]" id="model.microinstruction.IO7a6914" />

	<!--............. memory access .................-->
	<MemoryAccess name="M[AR]-&gt;IR" direction="read" memory="model.module.RAM1361a7c" data="model.module.Register1bd6f81" address="model.module.Register12b7207" id="model.microinstruction.MemoryAccess11971b0" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End52af84" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR1243446" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess11971b0" />
		<Microinstruction microRef="model.microinstruction.Increment1fa3f27" />
		<Microinstruction microRef="model.microinstruction.Decode1c1d271" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="OR" opcode="8" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#eea6fe #a1df96" assemblyColors="#eea6fe" >
		<Microinstruction microRef="model.microinstruction.Logicale4f8da" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="7" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#90f9d5 #87b0a0" assemblyColors="#90f9d5" >
		<Microinstruction microRef="model.microinstruction.Logical42f77a" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="MUL" opcode="6" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#ade8bf #c3d982" assemblyColors="#ade8bf" >
		<Microinstruction microRef="model.microinstruction.Arithmetic170f100" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="SUB" opcode="5" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#e7c5d4 #c996de" assemblyColors="#e7c5d4" >
		<Microinstruction microRef="model.microinstruction.Arithmetic2f25f3" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="STOP" opcode="4" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#99dada #baebef" assemblyColors="#99dada" >
		<Microinstruction microRef="model.microinstruction.SetCondBitde68c7" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="WRITE" opcode="3" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#e281d4 #8d90cc" assemblyColors="#e281d4" >
		<Microinstruction microRef="model.microinstruction.IO7a6914" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="2" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#c19889 #b194a6" assemblyColors="#c19889" >
		<Microinstruction microRef="model.microinstruction.Arithmetic107ed4e" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="TRANSFER_ATD" opcode="1" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#81f4b1 #b6e7e2" assemblyColors="#81f4b1" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR19823c4" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<MachineInstruction name="READ" opcode="0" instructionFormat="OP Unused" assemblyFormat="OP" instructionColors="#bc8cdf #dba1d0" assemblyColors="#bc8cdf" >
		<Microinstruction microRef="model.microinstruction.IO6ae91b" />
		<Microinstruction microRef="model.microinstruction.End52af84" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM1361a7c" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
